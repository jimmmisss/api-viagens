// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createRequestStmt, err = db.PrepareContext(ctx, createRequest); err != nil {
		return nil, fmt.Errorf("error preparing query Create: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getRequestByIDStmt, err = db.PrepareContext(ctx, getRequestByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindByID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listAllRequestsStmt, err = db.PrepareContext(ctx, listAllRequests); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllRequests: %w", err)
	}
	if q.listRequestsByUserIDStmt, err = db.PrepareContext(ctx, listRequestsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestsByUserID: %w", err)
	}
	if q.updateRequestStatusStmt, err = db.PrepareContext(ctx, updateRequestStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createRequestStmt != nil {
		if cerr := q.createRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getRequestByIDStmt != nil {
		if cerr := q.getRequestByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestByIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listAllRequestsStmt != nil {
		if cerr := q.listAllRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllRequestsStmt: %w", cerr)
		}
	}
	if q.listRequestsByUserIDStmt != nil {
		if cerr := q.listRequestsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestsByUserIDStmt: %w", cerr)
		}
	}
	if q.updateRequestStatusStmt != nil {
		if cerr := q.updateRequestStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createRequestStmt        *sql.Stmt
	createUserStmt           *sql.Stmt
	getRequestByIDStmt       *sql.Stmt
	getUserByIDStmt          *sql.Stmt
	getUserByUsernameStmt    *sql.Stmt
	listAllRequestsStmt      *sql.Stmt
	listRequestsByUserIDStmt *sql.Stmt
	updateRequestStatusStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createRequestStmt:        q.createRequestStmt,
		createUserStmt:           q.createUserStmt,
		getRequestByIDStmt:       q.getRequestByIDStmt,
		getUserByIDStmt:          q.getUserByIDStmt,
		getUserByUsernameStmt:    q.getUserByUsernameStmt,
		listAllRequestsStmt:      q.listAllRequestsStmt,
		listRequestsByUserIDStmt: q.listRequestsByUserIDStmt,
		updateRequestStatusStmt:  q.updateRequestStatusStmt,
	}
}
