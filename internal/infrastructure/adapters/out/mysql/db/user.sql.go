// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, password_hash, role)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID           string `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
	)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, role, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, role, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
