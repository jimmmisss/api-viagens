// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: request.sql

package db

import (
	"context"
	"time"
)

const createRequest = `-- name: Create :exec
INSERT INTO travel_requests (id, requester_name, destination, departure_date, return_date, status, created_at, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRequestParams struct {
	ID            string    `json:"id"`
	RequesterName string    `json:"requester_name"`
	Destination   string    `json:"destination"`
	DepartureDate time.Time `json:"departure_date"`
	ReturnDate    time.Time `json:"return_date"`
	Status        string    `json:"status"`
	CreatedAt     time.Time `json:"created_at"`
	UserID        string    `json:"user_id"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.exec(ctx, q.createRequestStmt, createRequest,
		arg.ID,
		arg.RequesterName,
		arg.Destination,
		arg.DepartureDate,
		arg.ReturnDate,
		arg.Status,
		arg.CreatedAt,
		arg.UserID,
	)
	return err
}

const getRequestByID = `-- name: FindByID :one
SELECT id, requester_name, destination, departure_date, return_date, status, created_at, user_id FROM travel_requests
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRequestByID(ctx context.Context, id string) (TravelRequests, error) {
	row := q.queryRow(ctx, q.getRequestByIDStmt, getRequestByID, id)
	var i TravelRequests
	err := row.Scan(
		&i.ID,
		&i.RequesterName,
		&i.Destination,
		&i.DepartureDate,
		&i.ReturnDate,
		&i.Status,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const listAllRequests = `-- name: ListAllRequests :many
SELECT id, requester_name, destination, departure_date, return_date, status, created_at, user_id FROM travel_requests
ORDER BY created_at DESC
`

func (q *Queries) ListAllRequests(ctx context.Context) ([]TravelRequests, error) {
	rows, err := q.query(ctx, q.listAllRequestsStmt, listAllRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TravelRequests{}
	for rows.Next() {
		var i TravelRequests
		if err := rows.Scan(
			&i.ID,
			&i.RequesterName,
			&i.Destination,
			&i.DepartureDate,
			&i.ReturnDate,
			&i.Status,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequestsByUserID = `-- name: ListRequestsByUserID :many
SELECT id, requester_name, destination, departure_date, return_date, status, created_at, user_id FROM travel_requests
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListRequestsByUserID(ctx context.Context, userID string) ([]TravelRequests, error) {
	rows, err := q.query(ctx, q.listRequestsByUserIDStmt, listRequestsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TravelRequests{}
	for rows.Next() {
		var i TravelRequests
		if err := rows.Scan(
			&i.ID,
			&i.RequesterName,
			&i.Destination,
			&i.DepartureDate,
			&i.ReturnDate,
			&i.Status,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRequestStatus = `-- name: UpdateStatus :exec
UPDATE travel_requests
SET status = ?
WHERE id = ?
`

type UpdateRequestStatusParams struct {
	Status string `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateRequestStatus(ctx context.Context, arg UpdateRequestStatusParams) error {
	_, err := q.exec(ctx, q.updateRequestStatusStmt, updateRequestStatus, arg.Status, arg.ID)
	return err
}
